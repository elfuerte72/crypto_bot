"""Notification templates for the crypto bot.

This module provides message templates for various notification types including
rate alerts, calculation results, admin notifications, and error messages.
"""

from __future__ import annotations

from typing import Any, Dict

from services.notification_service import NotificationTemplate


class NotificationTemplates:
    """Collection of predefined notification templates."""

    @staticmethod
    def get_default_templates() -> Dict[str, NotificationTemplate]:
        """Get default notification templates.

        Returns:
            Dictionary of template name to NotificationTemplate mappings
        """
        return {
            "transaction": NotificationTemplate(
                title="üí± –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è",
                body_template="""üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω –≤–∞–ª—é—Ç</b>

üìã <b>–î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>
‚Ä¢ ID: <code>{transaction_id}</code>
‚Ä¢ –í—Ä–µ–º—è: {timestamp}

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>
‚Ä¢ –ò–º—è: {user_display_name}
‚Ä¢ ID: <code>{user_id}</code>
{username_line}

üí∞ <b>–û–±–º–µ–Ω:</b>
‚Ä¢ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: <b>{currency_pair}</b>
‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}
‚Ä¢ –û—Ç–¥–∞–µ—Ç: <b>{input_amount}</b>
‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç: <b>{output_amount}</b>
‚Ä¢ –ö—É—Ä—Å: {exchange_rate}

üìä <b>–ö–æ–º–∏—Å—Å–∏—è:</b>
‚Ä¢ –ù–∞—Ü–µ–Ω–∫–∞: {markup_rate}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å: <b>{markup_amount} {quote_currency}</b>

‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞—è–≤–∫–∏:""",
                include_user_info=True,
                include_calculation_details=True,
                include_action_buttons=True,
            ),
            "rate_request": NotificationTemplate(
                title="üìä –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞",
                body_template="""üìä <b>–ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>
‚Ä¢ –ò–º—è: {user_display_name}
‚Ä¢ ID: <code>{user_id}</code>
{username_line}

üí± <b>–ó–∞–ø—Ä–æ—Å:</b>
‚Ä¢ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: <b>{currency_pair}</b>
‚Ä¢ –í—Ä–µ–º—è: {timestamp}

üí∞ <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b>
‚Ä¢ {exchange_rate}
‚Ä¢ –ù–∞—Ü–µ–Ω–∫–∞: {markup_rate}

‚ÑπÔ∏è –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞.""",
                include_user_info=True,
                include_calculation_details=False,
                include_action_buttons=False,
            ),
            "calculation_request": NotificationTemplate(
                title="üßÆ –†–∞—Å—á–µ—Ç —Å—É–º–º—ã",
                body_template="""üßÆ <b>–ó–∞–ø—Ä–æ—Å —Ä–∞—Å—á–µ—Ç–∞ –æ–±–º–µ–Ω–∞</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>
‚Ä¢ –ò–º—è: {user_display_name}
‚Ä¢ ID: <code>{user_id}</code>
{username_line}

üí∞ <b>–†–∞—Å—á–µ—Ç:</b>
‚Ä¢ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: <b>{currency_pair}</b>
‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}
‚Ä¢ –û—Ç–¥–∞–µ—Ç: <b>{input_amount}</b>
‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç: <b>{output_amount}</b>
‚Ä¢ –ö—É—Ä—Å: {exchange_rate}
‚Ä¢ –í—Ä–µ–º—è: {timestamp}

üìä <b>–î–µ—Ç–∞–ª–∏:</b>
‚Ä¢ –ù–∞—Ü–µ–Ω–∫–∞: {markup_rate}
‚Ä¢ –ù–∞—à–∞ –ø—Ä–∏–±—ã–ª—å: <b>{markup_amount} {quote_currency}</b>

üí° –ö–ª–∏–µ–Ω—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–ª —Å—É–º–º—É –æ–±–º–µ–Ω–∞.""",
                include_user_info=True,
                include_calculation_details=True,
                include_action_buttons=False,
            ),
            "error": NotificationTemplate(
                title="‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
                body_template="""‚ö†Ô∏è <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞</b>

üìã <b>–î–µ—Ç–∞–ª–∏:</b>
‚Ä¢ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: <code>{transaction_id}</code>
‚Ä¢ –í—Ä–µ–º—è: {timestamp}
‚Ä¢ –û—à–∏–±–∫–∞: {error_message}

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>
‚Ä¢ {user_display_name} (ID: <code>{user_id}</code>)
{username_line}

üîß <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</b>

‚ö° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.""",
                include_user_info=True,
                include_calculation_details=False,
                include_action_buttons=False,
            ),
            "system_alert": NotificationTemplate(
                title="üö® –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                body_template="""üö® <b>–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>

üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –í—Ä–µ–º—è: {timestamp}
‚Ä¢ –¢–∏–ø: {alert_type}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: {alert_message}

üîç <b>–î–µ—Ç–∞–ª–∏:</b>
{alert_details}

‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.""",
                include_user_info=False,
                include_calculation_details=False,
                include_action_buttons=False,
            ),
            "high_volume_alert": NotificationTemplate(
                title="üìà –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä—É–ø–Ω–æ–π —Å—É–º–º–µ",
                body_template="""üìà <b>–ö—Ä—É–ø–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è</b>

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ! –°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç</b>

üìã <b>–î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>
‚Ä¢ ID: <code>{transaction_id}</code>
‚Ä¢ –í—Ä–µ–º—è: {timestamp}

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>
‚Ä¢ –ò–º—è: {user_display_name}
‚Ä¢ ID: <code>{user_id}</code>
{username_line}

üí∞ <b>–û–±–º–µ–Ω:</b>
‚Ä¢ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: <b>{currency_pair}</b>
‚Ä¢ –°—É–º–º–∞: <b>{input_amount}</b> ‚û°Ô∏è <b>{output_amount}</b>
‚Ä¢ –ö—É—Ä—Å: {exchange_rate}

üìä <b>–ü—Ä–∏–±—ã–ª—å:</b>
‚Ä¢ –ù–∞—Ü–µ–Ω–∫–∞: {markup_rate}
‚Ä¢ –ù–∞—à–∞ –ø—Ä–∏–±—ã–ª—å: <b>{markup_amount} {quote_currency}</b>

‚ö° <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞!</b>""",
                include_user_info=True,
                include_calculation_details=True,
                include_action_buttons=True,
            ),
            "daily_summary": NotificationTemplate(
                title="üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞",
                body_template="""üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞</b>

üìÖ <b>–î–∞—Ç–∞:</b> {date}

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_transactions}
‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: {rejected_transactions}
‚Ä¢ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {pending_transactions}

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: <b>{total_volume}</b>
‚Ä¢ –ü—Ä–∏–±—ã–ª—å: <b>{total_profit}</b>
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <b>{average_transaction}</b>

üîù <b>–¢–æ–ø –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã:</b>
{top_pairs}

üìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:</b>
{manager_activity}""",
                include_user_info=False,
                include_calculation_details=False,
                include_action_buttons=False,
            ),
            "manager_assignment": NotificationTemplate(
                title="üë®‚Äçüíº –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
                body_template="""üë®‚Äçüíº <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞</b>

üéØ <b>–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</b>

üìã <b>–î–µ—Ç–∞–ª–∏:</b>
‚Ä¢ –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã: <b>{currency_pairs}</b>
‚Ä¢ –í—Ä–µ–º—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {timestamp}
‚Ä¢ –ù–∞–∑–Ω–∞—á–∏–ª: {assigned_by}

üì¢ <b>–í–∞—à–∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±–º–µ–Ω –≤–∞–ª—é—Ç
‚Ä¢ –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º

‚úÖ <b>–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö!</b>""",
                include_user_info=False,
                include_calculation_details=False,
                include_action_buttons=False,
            ),
            "markup_change": NotificationTemplate(
                title="üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏",
                body_template="""üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏</b>

üí± <b>–û–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞—Ü–µ–Ω–∫–∞ –¥–ª—è –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã</b>

üìã <b>–î–µ—Ç–∞–ª–∏:</b>
‚Ä¢ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: <b>{currency_pair}</b>
‚Ä¢ –°—Ç–∞—Ä–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: {old_markup_rate}%
‚Ä¢ –ù–æ–≤–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: <b>{new_markup_rate}%</b>
‚Ä¢ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: {timestamp}
‚Ä¢ –ò–∑–º–µ–Ω–∏–ª: {changed_by}

üìà <b>–í–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–∏–±—ã–ª—å:</b>
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {markup_change}%
‚Ä¢ –ù–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å —Å —Å—É–º–º—ã 1000 USD: <b>{profit_example}</b>

‚ÑπÔ∏è –ù–æ–≤–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ –≤—Å—Ç—É–ø–∏–ª–∞ –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.""",
                include_user_info=False,
                include_calculation_details=False,
                include_action_buttons=False,
            ),
            "api_error": NotificationTemplate(
                title="üîå –û—à–∏–±–∫–∞ API",
                body_template="""üîå <b>–û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ API</b>

‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç</b>

üìã <b>–î–µ—Ç–∞–ª–∏:</b>
‚Ä¢ API: Rapira Exchange
‚Ä¢ –í—Ä–µ–º—è –æ—à–∏–±–∫–∏: {timestamp}
‚Ä¢ –ö–æ–¥ –æ—à–∏–±–∫–∏: {error_code}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}

üîÑ <b>–°—Ç–∞—Ç—É—Å:</b>
‚Ä¢ –ü–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {retry_count}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {last_success}

‚ö° <b>–î–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
‚Ä¢ –£–≤–µ–¥–æ–º–∏—Ç–µ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏""",
                include_user_info=False,
                include_calculation_details=False,
                include_action_buttons=False,
            ),
        }

    @staticmethod
    def get_template_by_name(name: str) -> NotificationTemplate | None:
        """Get template by name.

        Args:
            name: Template name

        Returns:
            NotificationTemplate or None if not found
        """
        templates = NotificationTemplates.get_default_templates()
        return templates.get(name)

    @staticmethod
    def get_available_template_names() -> list[str]:
        """Get list of available template names.

        Returns:
            List of template names
        """
        return list(NotificationTemplates.get_default_templates().keys())

    @staticmethod
    def create_custom_template(
        title: str,
        body_template: str,
        include_user_info: bool = True,
        include_calculation_details: bool = True,
        include_action_buttons: bool = False,
    ) -> NotificationTemplate:
        """Create custom notification template.

        Args:
            title: Template title
            body_template: Message body template with placeholders
            include_user_info: Whether to include user information
            include_calculation_details: Whether to include calculation details
            include_action_buttons: Whether to include action buttons

        Returns:
            NotificationTemplate instance
        """
        return NotificationTemplate(
            title=title,
            body_template=body_template,
            include_user_info=include_user_info,
            include_calculation_details=include_calculation_details,
            include_action_buttons=include_action_buttons,
        )

    @staticmethod
    def get_template_variables() -> Dict[str, str]:
        """Get available template variables and their descriptions.

        Returns:
            Dictionary of variable names to descriptions
        """
        return {
            # Transaction variables
            "transaction_id": "Unique transaction identifier",
            "timestamp": "Formatted timestamp of the transaction",
            "currency_pair": "Currency pair (e.g., USD/RUB)",
            "direction": "Transaction direction (Buy/Sell)",
            # User variables
            "user_id": "Telegram user ID",
            "user_display_name": "User's display name (full name, username, or ID)",
            "username": "User's Telegram username",
            "full_name": "User's full name",
            "username_line": "Formatted username line (if available)",
            # Calculation variables
            "input_amount": "Formatted input amount with currency",
            "output_amount": "Formatted output amount with currency",
            "exchange_rate": "Formatted exchange rate",
            "markup_rate": "Markup rate percentage",
            "markup_amount": "Markup amount in quote currency",
            "base_currency": "Base currency code",
            "quote_currency": "Quote currency code",
            # Error variables
            "error_message": "Error description",
            "error_code": "Error code (if applicable)",
            # System variables
            "alert_type": "Type of system alert",
            "alert_message": "Alert message",
            "alert_details": "Detailed alert information",
            # Statistics variables
            "date": "Date for reports",
            "total_transactions": "Total number of transactions",
            "successful_transactions": "Number of successful transactions",
            "rejected_transactions": "Number of rejected transactions",
            "pending_transactions": "Number of pending transactions",
            "total_volume": "Total transaction volume",
            "total_profit": "Total profit",
            "average_transaction": "Average transaction amount",
            "top_pairs": "Top currency pairs by volume",
            "manager_activity": "Manager activity statistics",
            # Management variables
            "currency_pairs": "List of currency pairs",
            "assigned_by": "Who assigned the manager",
            "old_markup_rate": "Previous markup rate",
            "new_markup_rate": "New markup rate",
            "markup_change": "Markup change percentage",
            "profit_example": "Example profit calculation",
            "changed_by": "Who changed the markup",
            # API variables
            "retry_count": "Number of retry attempts",
            "last_success": "Last successful API call timestamp",
        }

    @staticmethod
    def validate_template(template: NotificationTemplate) -> list[str]:
        """Validate template for common issues.

        Args:
            template: Template to validate

        Returns:
            List of validation errors (empty if valid)
        """
        errors = []

        # Check if template has required fields
        if not template.title:
            errors.append("Template title is required")

        if not template.body_template:
            errors.append("Template body is required")

        # Check for common template variable issues
        body = template.body_template

        # Check for unmatched braces
        open_braces = body.count("{")
        close_braces = body.count("}")
        if open_braces != close_braces:
            errors.append("Unmatched braces in template body")

        # Check for HTML tag issues
        if "<b>" in body and "</b>" not in body:
            errors.append("Unclosed <b> tag in template")

        if "<code>" in body and "</code>" not in body:
            errors.append("Unclosed <code> tag in template")

        # Check for required variables based on template settings
        if template.include_user_info:
            required_vars = ["user_display_name", "user_id"]
            for var in required_vars:
                if f"{{{var}}}" not in body:
                    errors.append(f"Missing required user variable: {var}")

        if template.include_calculation_details:
            required_vars = ["currency_pair", "input_amount", "output_amount"]
            for var in required_vars:
                if f"{{{var}}}" not in body:
                    errors.append(f"Missing required calculation variable: {var}")

        return errors
