#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"
"""

import asyncio
import logging
from pathlib import Path
import sys

# Add src directory to Python path
src_path = Path(__file__).parent / "src"
if str(src_path) not in sys.path:
    sys.path.insert(0, str(src_path))

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from config.settings import get_settings

# Setup logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Create bot and dispatcher
settings = get_settings()
bot = Bot(token=settings.telegram.token)
dp = Dispatcher()


@dp.message(Command("test"))
async def test_keyboard(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", callback_data="start_calculation")
    )
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_pair_selection")
    )

    keyboard = builder.as_markup()

    await message.answer(
        "üßÆ <b>–¢–µ—Å—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞</b>\n\n" "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:",
        reply_markup=keyboard,
        parse_mode="HTML",
    )

    logger.info(f"Keyboard sent to user {message.from_user.id}")


@dp.callback_query(F.data == "start_calculation")
async def handle_test_calculation(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'"""
    logger.info(f"üéØ –ö–ù–û–ü–ö–ê –†–ê–°–°–ß–ò–¢–ê–¢–¨ –ù–ê–ñ–ê–¢–ê! User: {callback.from_user.id}")

    await callback.answer("‚úÖ –ö–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!", show_alert=True)

    await callback.message.edit_text(
        "‚úÖ <b>–£—Å–ø–µ—Ö!</b>\n\n" "–ö–Ω–æ–ø–∫–∞ '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!",
        parse_mode="HTML",
    )


@dp.callback_query(F.data == "back_to_pair_selection")
async def handle_test_back(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    logger.info(f"‚¨ÖÔ∏è –ö–ù–û–ü–ö–ê –ù–ê–ó–ê–î –ù–ê–ñ–ê–¢–ê! User: {callback.from_user.id}")

    await callback.answer("–ù–∞–∑–∞–¥", show_alert=False)

    await callback.message.edit_text(
        "‚¨ÖÔ∏è <b>–ù–∞–∑–∞–¥</b>\n\n" "–ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!", parse_mode="HTML"
    )


@dp.callback_query()
async def handle_unhandled_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback'–æ–≤"""
    logger.warning(
        f"‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback: {callback.data}, user: {callback.from_user.id}"
    )
    await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞...")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(bot)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
