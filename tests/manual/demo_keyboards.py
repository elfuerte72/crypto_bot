#!/usr/bin/env python3
"""–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è crypto bot.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –≤—ã–≥–ª—è–¥—è—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
"""

from src.bot.keyboards.currency_keyboard import (
    CurrencyKeyboard,
    parse_callback,
)


def demo_keyboard_structure(keyboard_name: str, markup):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    print(f"\n=== {keyboard_name} ===")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤: {len(markup.inline_keyboard)}")

    total_buttons = sum(len(row) for row in markup.inline_keyboard)
    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫: {total_buttons}")

    print("\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:")
    for i, row in enumerate(markup.inline_keyboard):
        print(f"  –†—è–¥ {i+1}: {len(row)} –∫–Ω–æ–ø–æ–∫")
        for j, button in enumerate(row):
            print(f"    –ö–Ω–æ–ø–∫–∞ {j+1}: '{button.text}' -> '{button.callback_data}'")


def demo_callback_parsing():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ callback –¥–∞–Ω–Ω—ã—Ö."""
    print("\n=== –î–ï–ú–û –ü–ê–†–°–ò–ù–ì–ê CALLBACK –î–ê–ù–ù–´–• ===")

    test_callbacks = [
        "currency:RUB:ZAR",
        "currency:USDT:THB",
        "markup:RUB:AED",
        "admin:currency:BTC:USD",
        "invalid_callback",
        "currency:RUB",  # –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    ]

    for callback in test_callbacks:
        result = parse_callback(callback)
        if result:
            action, base, quote = result
            print(
                f"'{callback}' -> –î–µ–π—Å—Ç–≤–∏–µ: {action}, –ë–∞–∑–æ–≤–∞—è: {base}, –ö–æ—Ç–∏—Ä—É–µ–º–∞—è: {quote}"
            )
        else:
            print(f"'{callback}' -> –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print("ü§ñ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø INLINE –ö–õ–ê–í–ò–ê–¢–£–† CRYPTO BOT")
    print("=" * 50)

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = CurrencyKeyboard()

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    rate_markup = keyboard.create_rate_selection_keyboard()
    demo_keyboard_structure("–ö–õ–ê–í–ò–ê–¢–£–†–ê –í–´–ë–û–†–ê –ö–£–†–°–ê", rate_markup)

    calc_markup = keyboard.create_calc_selection_keyboard()
    demo_keyboard_structure("–ö–õ–ê–í–ò–ê–¢–£–†–ê –†–ê–°–ß–ï–¢–û–í", calc_markup)

    admin_markup = keyboard.create_admin_currency_keyboard()
    demo_keyboard_structure("–ê–î–ú–ò–ù–°–ö–ê–Ø –ö–õ–ê–í–ò–ê–¢–£–†–ê", admin_markup)

    markup_markup = keyboard.create_markup_selection_keyboard()
    demo_keyboard_structure("–ö–õ–ê–í–ò–ê–¢–£–†–ê –ù–ê–°–¢–†–û–ô–ö–ò –ù–ê–¶–ï–ù–ö–ò", markup_markup)

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    back_markup = CurrencyKeyboard.create_back_keyboard()
    demo_keyboard_structure("–ö–ù–û–ü–ö–ê –ù–ê–ó–ê–î", back_markup)

    confirm_markup = CurrencyKeyboard.create_confirm_keyboard()
    demo_keyboard_structure("–ö–õ–ê–í–ò–ê–¢–£–†–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø", confirm_markup)

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ callback –¥–∞–Ω–Ω—ã—Ö
    demo_callback_parsing()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä–∞—Ö
    print("\n=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–ê–õ–Æ–¢–ù–´–• –ü–ê–†–ê–• ===")
    print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã: {len(keyboard._currency_pairs)}")
    for i, (base, quote) in enumerate(keyboard._currency_pairs, 1):
        emoji_base = keyboard.CURRENCY_EMOJIS.get(base, "")
        emoji_quote = keyboard.CURRENCY_EMOJIS.get(quote, "")
        print(f"  {i}. {emoji_base} {base} ‚Üî {quote} {emoji_quote}")

    print(f"\n–í—Å–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ–±–º–µ–Ω–∞: {len(keyboard._currency_pairs) * 2}")

    print("\n‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")


if __name__ == "__main__":
    main()
